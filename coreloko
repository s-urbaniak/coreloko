#!/bin/bash
# Manage VM nodes which have a specific set of hardware attributes.
set -o pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

BRIDGE=${BRIDGE:-virbr1}
GPG=${GPG:-/usr/bin/gpg}
VOLUME_POOL=default
VOLUME_DIR=/var/lib/libvirt/images

CHANNEL=stable
VERSION=1235.9.0
BASE_URL=https://$CHANNEL.release.core-os.net/amd64-usr/$VERSION

function main {
  case "$1" in
    "init") init;;
    "userdata") userdata;;
    "create") create;;
    "start") start;;
    "reboot") reboot;;
    "shutdown") shutdown;;
    "poweroff") poweroff;;
    "destroy") destroy;;
    *)
      usage
      exit 2
      ;;
  esac
}

function usage {
  echo "USAGE: ${0##*/} <command>"
  echo "Commands:"
  echo -e "\tinit\t\tdownload and verify CoreOS images"
  echo -e "\tuserdata\tgenerate userdata for nodes"
  echo -e "\tcreate\t\tcreate QEMU/KVM nodes"
  echo -e "\tstart\t\tstart the QEMU/KVM nodes"
  echo -e "\treboot\t\treboot the QEMU/KVM nodes"
  echo -e "\tshutdown\tshutdown the QEMU/KVM nodes"
  echo -e "\tpoweroff\tpoweroff the QEMU/KVM nodes"
  echo -e "\tdestroy\t\tdestroy the QEMU/KVM nodes"
}

function require_sudo {
  if [ "$EUID" -ne 0 ]
    then echo "Please run as root"
    exit
  fi
}

function require_user {
  if [ "$EUID" -eq 0 ]
    then echo "Please don't run as root"
    exit
  fi
}

# Download, verify, and decompress CoreOS images
function init {
  require_sudo

  if [ ! -d $VOLUME_DIR ]; then
    echo "Creating $VOLUME_DIR"
    mkdir -p $VOLUME_DIR
  fi

  # QEMU image
  echo "Downloading CoreOS $CHANNEL $VERSION coreos_production_qemu_image.img.bz2..."
  curl -# $BASE_URL/coreos_production_qemu_image.img.bz2 -o $VOLUME_DIR/coreos_production_qemu_image.img.bz2
  echo "Downloading coreos_production_qemu_image.img.bz2.sig"
  curl -# $BASE_URL/coreos_production_qemu_image.img.bz2.sig -o $VOLUME_DIR/coreos_production_qemu_image.img.bz2.sig
  
  echo "OpenPGP Verify"
  $GPG --verify $VOLUME_DIR/coreos_production_qemu_image.img.bz2.sig
  
  echo "Decompressing bz2 to raw image"
  bzip2 -d -f $VOLUME_DIR/coreos_production_qemu_image.img.bz2
  rm $VOLUME_DIR/coreos_production_qemu_image.img.bz2.sig
}

# TODO: Derive node list and user-data from coreos-baremetal examples
nodes=(1 2)

# Create a cluster nodes
function create {
  require_sudo
  for n in ${nodes[@]}; do
    cp node.yaml data/node$n.yaml
    cat <<EOF >>data/node$n.yaml

storage:
  files:
    - path: /etc/node.env
      filesystem: root
      contents:
        inline: |
          NODE_INDEX=${n}
          DOCKER_OPT_BIP=--bip 10.2.${n}.1/25

networkd:
  units:
    - name: eth0.network
      contents: |
        [Match]
        Name=eth0

        [Network]
        Address=10.1.1.$((1+${n}))/24
        Gateway=10.1.1.1
        DNS=10.1.1.1

        [Route]
        Gateway=10.1.1.1
        Destination=10.2.0.0/16
EOF

    cat data/node$n.yaml | ct -pretty >data/node$n.ign 
    create_vm node$n
    ip route add 10.2.${n}.0/24 via 10.1.1.$((1+${n})) dev virbr1
  done
}

function create_vm {
  NODE=$1
  create_disk $NODE
  # copy Ignition into a root directory to avoid any livirtd execute/search
  # errors arising from user's parent directory permissions
  cp data/$NODE.ign $VOLUME_DIR/

  NS="type='kvm' xmlns:qemu='http:\/\/libvirt.org\/schemas\/domain\/qemu\/1.0'"
  QEMU_FW_CFG="<qemu:commandline>\n  <qemu:arg value='-fw_cfg'/>\n  <qemu:arg value='name=opt/com.coreos/config,file=$VOLUME_DIR/$NODE.ign'/>\n</qemu:commandline>"

  virt-install --connect qemu:///system \
      --name $NODE \
      --vcpus=1 \
      --memory=1024 \
      --disk path=$VOLUME_DIR/$NODE.qcow2,format=qcow2,bus=virtio \
      --network=bridge:$BRIDGE \
      --boot hd \
      --os-type=linux \
      --os-variant=virtio26 \
      --noautoconsole \
      --print-xml \
  | sed -e "s/type=\"kvm\"/$NS/" \
  | sed "/<\/devices>/a $QEMU_FW_CFG" \
  > data/$NODE.domain.xml

  virsh define data/$NODE.domain.xml
  virsh start $NODE
}

function create_disk {
  NODE=$1
  # create a copy-on-write image based on the CoreOS QEMU image
  qemu-img create -f qcow2 -o backing_file=$VOLUME_DIR/coreos_production_qemu_image.img $VOLUME_DIR/$NODE.qcow2
}

# Destroy cluster nodes
function destroy {
  set -x

  require_sudo
  for node in ${nodes[@]}; do
    virsh destroy node$node
  done
  for node in ${nodes[@]}; do
    virsh undefine node$node
  done
  virsh pool-refresh default
  for node in ${nodes[@]}; do
    virsh vol-delete --pool $VOLUME_POOL node$node.qcow2
    virsh vol-delete --pool $VOLUME_POOL node$node.ign
  done
  for node in ${nodes[@]}; do
    ip route del 10.2.${node}.0/24 via 10.1.1.$((1+${node})) dev virbr1
  done
}

main $@
